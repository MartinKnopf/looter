// Generated by CoffeeScript 1.8.0
(function() {
  var balance, canBuy, canSell, cannotBuy, cannotSell, clickBuy, clickNextTurn, clickSell, clickStartGame, newBuy, newPrice, newSell, newStockAmount, newTurn, randomize, resetUi, sinPrice, stocks;

  stocks = [
    {
      min: 900,
      max: 3500
    }
  ];

  sinPrice = function(min, max, x) {
    return Math.floor((Math.sin(x) + 1.4) * (max + 1 - min) + min);
  };

  randomize = function(min, max, price) {
    return Math.floor(_.random(price - _.random(min, max) / 2, price + _.random(min, max) / 2));
  };

  resetUi = function() {
    $('.turn-nr').text('');
    return $('.stock1 .price').text('');
  };

  clickStartGame = Rx.Observable.fromEvent($('.start-new-game'), 'click');

  clickNextTurn = Rx.Observable.fromEvent($('.next-turn'), 'click');

  clickBuy = Rx.Observable.fromEvent($('.stock1 .buy'), 'click');

  clickSell = Rx.Observable.fromEvent($('.stock1 .sell'), 'click');

  newTurn = clickNextTurn.select(function(event, idx) {
    return idx + 1;
  }).take(10).merge(clickStartGame.map(_.constant(0)));

  newPrice = newTurn.filter(function(x) {
    return x !== 0;
  }).map(_.partial(sinPrice, stocks[0].min, stocks[0].max)).map(_.partial(randomize, stocks[0].min, stocks[0].max)).publish();

  newBuy = Rx.Observable.combineLatest(clickBuy, newPrice, function(event, price) {
    return {
      event: event,
      price: price
    };
  }).distinctUntilChanged(function(x) {
    return x.event;
  }).map(function(x) {
    return -x.price;
  });

  newSell = Rx.Observable.combineLatest(clickSell, newPrice, function(event, price) {
    return {
      event: event,
      price: price
    };
  }).distinctUntilChanged(function(x) {
    return x.event;
  }).map(function(x) {
    return x.price;
  });

  newStockAmount = newBuy.map(function() {
    return 1;
  }).merge(newSell.map(function() {
    return -1;
  })).scan(0, function(acc, x) {
    return acc + x;
  }).merge(clickStartGame.map(_.constant(0)));

  balance = Rx.Observable.merge(newBuy, newSell).scan(function(sum, price) {
    return sum + price;
  }).merge(clickStartGame.map(_.constant(10000)));

  canBuy = Rx.Observable.combineLatest(balance, newPrice, function(balance, price) {
    return {
      balance: balance,
      price: price
    };
  }).filter(function(x) {
    return x.balance >= x.price;
  });

  cannotBuy = Rx.Observable.combineLatest(balance, newPrice, function(balance, price) {
    return {
      balance: balance,
      price: price
    };
  }).filter(function(x) {
    return x.balance < x.price;
  }).merge(clickStartGame);

  canSell = newStockAmount.filter(function(amount) {
    return amount > 0;
  });

  cannotSell = newStockAmount.filter(function(amount) {
    return amount <= 0;
  }).merge(clickStartGame);

  clickStartGame.subscribe(resetUi);

  newTurn.subscribe(function(balance) {
    return $('.turn-nr').text(balance);
  });

  newPrice.subscribe(function(balance) {
    return $('.stock1 .price').text(balance);
  });

  balance.subscribe(function(balance) {
    return $('.balance').text(balance);
  });

  canBuy.subscribe(function(price) {
    return $('.stock1 .buy').prop('disabled', false);
  });

  cannotBuy.subscribe(function(price) {
    return $('.stock1 .buy').prop('disabled', true);
  });

  canSell.subscribe(function(price) {
    return $('.stock1 .sell').prop('disabled', false);
  });

  cannotSell.subscribe(function(price) {
    return $('.stock1 .sell').prop('disabled', true);
  });

  newBuy.subscribe(function(price) {
    return $('.stock1 .sell').prop('disabled', false);
  });

  newStockAmount.subscribe(function(amount) {
    return $('.stock1 .amount').text(amount);
  });

  newPrice.connect();

}).call(this);
