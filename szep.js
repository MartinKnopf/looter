// Generated by CoffeeScript 1.8.0
(function() {
  var root, szep;

  szep = {
    ctrl: function(name, sequences) {
      return $('[lt-ctrl=' + name + ']').each(function() {
        var $scope, scopeName;
        scopeName = $(this).attr('lt-ctrl');
        $scope = $(this);
        $scope.find('[lt-text]').each(function() {
          var binder, seqName;
          seqName = $(this).attr('lt-text');
          binder = function(seqName, attrVal) {
            if (!sequences[seqName]) {
              throw new Error('no sequence named ' + seqName + ' for binding lt-text in controller ' + name);
            }
            return sequences[seqName].subscribe(function(value) {
              return $scope.find('[lt-text="' + attrVal + '"]').each(function() {
                return $(this).text(value);
              });
            });
          };
          if (seqName.indexOf(',') >= 0) {
            return _.forEach(seqName.split(','), function(seq) {
              return binder(seq, seqName);
            });
          } else {
            return binder(seqName, seqName);
          }
        });
        $scope.find('[lt-enabled]').each(function() {
          var binder, seqName;
          seqName = $(this).attr('lt-enabled');
          binder = function(seqName, attrVal) {
            if (!sequences[seqName]) {
              throw new Error('no sequence named ' + seqName + ' for binding lt-text in controller ' + name);
            }
            return sequences[seqName].subscribe(function(value) {
              return $scope.find('[lt-enabled="' + attrVal + '"]').each(function() {
                return $(this).prop('disabled', false);
              });
            });
          };
          if (seqName.indexOf(',') >= 0) {
            return _.forEach(seqName.split(','), function(seq) {
              return binder(seq, seqName);
            });
          } else {
            return binder(seqName, seqName);
          }
        });
        $scope.find('[lt-disabled]').each(function() {
          var binder, seqName;
          seqName = $(this).attr('lt-disabled');
          binder = function(seqName, attrVal) {
            if (!sequences[seqName]) {
              throw new Error('no sequence named ' + seqName + ' for binding lt-text in controller ' + name);
            }
            return sequences[seqName].subscribe(function(value) {
              return $scope.find('[lt-disabled="' + attrVal + '"]').each(function() {
                return $(this).prop('disabled', true);
              });
            });
          };
          if (seqName.indexOf(',') >= 0) {
            return _.forEach(seqName.split(','), function(seq) {
              return binder(seq, seqName);
            });
          } else {
            return binder(seqName, seqName);
          }
        });
        $scope.find('[lt-show]').each(function() {
          var binder, seqName;
          seqName = $(this).attr('lt-show');
          binder = function(seqName, attrVal) {
            if (!sequences[seqName]) {
              throw new Error('no sequence named ' + seqName + ' for binding lt-text in controller ' + name);
            }
            return sequences[seqName].subscribe(function(value) {
              return $scope.find('[lt-show="' + attrVal + '"]').each(function() {
                return $(this).show();
              });
            });
          };
          if (seqName.indexOf(',') >= 0) {
            return _.forEach(seqName.split(','), function(seq) {
              return binder(seq, seqName);
            });
          } else {
            return binder(seqName, seqName);
          }
        });
        return $scope.find('[lt-hide]').each(function() {
          var binder, seqName;
          seqName = $(this).attr('lt-hide');
          binder = function(seqName, attrVal) {
            if (!sequences[seqName]) {
              throw new Error('no sequence named ' + seqName + ' for binding lt-text in controller ' + name);
            }
            return sequences[seqName].subscribe(function(value) {
              return $scope.find('[lt-hide="' + attrVal + '"]').each(function() {
                return $(this).hide();
              });
            });
          };
          if (seqName.indexOf(',') >= 0) {
            return _.forEach(seqName.split(','), function(seq) {
              return binder(seq, seqName);
            });
          } else {
            return binder(seqName, seqName);
          }
        });
      });
    }
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (!root.szep) {
    root.szep = szep;
  }

}).call(this);
